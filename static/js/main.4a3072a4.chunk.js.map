{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Phonebook/Phonebook.js","components/Contacts/Contacts.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contact","id","uuidv4","actions","post","then","data","catch","error","a","delete","get","getContactBase","state","contacts","getFilterValue","filter","getVisibleContacts","createSelector","contacList","normalizedFilter","toLowerCase","includes","getLoading","loading","Phonebook","contactCreateList","nameToCheck","props","addContact","contactBase","isExist","map","alert","contactAdd","event","preventDefault","resetForm","handleInputChange","e","currentTarget","value","setState","nameInputId","phoneInputId","onSubmit","this","htmlFor","type","pattern","title","required","onChange","Component","connect","contactsSelectors","contactOperations","Contacts","fetchContacts","deleteContact","isLoadingContacts","onClick","contactActions","App","Fragment","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a3072a4.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst changeFilter = createAction('contacts/filter');\r\n\r\nexport default {\r\n  changeFilter,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n};\r\n\r\n/* const addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n})); */\r\n\r\n/* const deleteContact = createAction('contacts/delete'); */\r\n","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport actions from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  try {\r\n    axios\r\n      .delete(`contacts/${id}`)\r\n      .then(() => dispatch(actions.deleteContactSuccess(id)));\r\n  } catch (error) {\r\n    dispatch(actions.deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  try {\r\n    axios\r\n      .get('/contacts')\r\n      .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)));\r\n  } catch (error) {\r\n    dispatch(actions.fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n\r\n/* const fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)));\r\n}; */\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nconst getContactBase = state => state.contact.contacts;\r\n\r\nconst getFilterValue = state => state.contact.filter;\r\n\r\nconst getLoading = state => state.contact.loading;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContactBase, getFilterValue],\r\n  (contacList, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacList.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getContactBase,\r\n  getFilterValue,\r\n  getVisibleContacts,\r\n  getLoading,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n// uuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n\r\nclass Phonebook extends Component {\r\n  state = { name: '', number: '' };\r\n\r\n  contactCreateList = () => {\r\n    const nameToCheck = this.state.name.toLowerCase();\r\n    const { name, number } = this.state;\r\n    const { addContact, contactBase } = this.props;\r\n    let isExist = true;\r\n\r\n    contactBase.map(({ name }) => {\r\n      if (name.toLowerCase() === nameToCheck) {\r\n        isExist = false;\r\n        alert(`${name} is already added to your phonebook`);\r\n      }\r\n    });\r\n    if (isExist) {\r\n      addContact(name, number);\r\n    }\r\n  };\r\n\r\n  contactAdd = event => {\r\n    event.preventDefault();\r\n    this.contactCreateList();\r\n    this.resetForm();\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const nameInputId = uuidv4();\r\n    const phoneInputId = uuidv4();\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.contactAdd}>\r\n          <label htmlFor={nameInputId}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleInputChange}\r\n              value={this.state.name}\r\n              id={nameInputId}\r\n            />\r\n          </label>\r\n\r\n          <label htmlFor=\"phoneInputId\">\r\n            number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleInputChange}\r\n              value={this.state.number}\r\n              id={phoneInputId}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  contactBase: contactsSelectors.getContactBase(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (name, value) =>\r\n    dispatch(contactOperations.addContact(name, value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\r\n","import React, { Component } from 'react';\r\n/* import styles from './Contacts.css'; */\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nclass Contacts extends Component {\r\n  state = {};\r\n\r\n  static propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    deleteContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    const { contacts, deleteContact, isLoadingContacts } = this.props;\r\n    return (\r\n      <div>\r\n        {isLoadingContacts && <h2>...loading</h2>}\r\n        <ul>\r\n          {contacts.map(({ id, name, number }) => {\r\n            return (\r\n              <li key={id}>\r\n                <p>\r\n                  {name}: {number}\r\n                </p>\r\n                <button type=\"button\" onClick={() => deleteContact(id)}>\r\n                  delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactOperations.deleteContact(id)),\r\n  fetchContacts: () => dispatch(contactOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n/* \r\nimport styles from './Filter.module.css'; */\r\n\r\nconst Filter = ({ filter, changeFilter }) => {\r\n  return (\r\n    <label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={changeFilter}\r\n      ></input>\r\n      <br />\r\n      Find contacts by name\r\n    </label>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilterValue(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: e =>\r\n    dispatch(contactActions.changeFilter(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport Phonebook from './components/Phonebook';\r\nimport Contacts from './components/Contacts';\r\nimport Filter from './components/Filter';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Phonebook</h1>\r\n        <Phonebook />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <Contacts />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport actions from './contacts-actions';\r\n\r\nconst contacts = createReducer([], {\r\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContactSuccess]: (state, { payload }) => [\r\n    ...state.filter(contact => contact.id !== payload),\r\n  ],\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [actions.fetchContactsRequest]: () => true,\r\n  [actions.fetchContactsError]: () => false,\r\n  [actions.fetchContactsSuccess]: () => false,\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactError]: () => false,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactError]: () => false,\r\n  [actions.deleteContactSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n/* const contacts = (state = baseContacts, { type, payload }) => {\r\n  switch (type) {\r\n    case actionType.ADD:\r\n      return [...state, payload];\r\n\r\n    case actionType.DELETE:\r\n      return [...state.filter(contact => contact.id !== payload)];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}; */\r\n\r\n/* const filter = (state = '', { type, payload }) => {\r\n  switch (type) {\r\n    case actionType.CHANGE_FILTER:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}; */\r\n\r\n/* const baseContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n]; */\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  PAUSE,\r\n  PURGE,\r\n  PERSIST,\r\n  REGISTER,\r\n  REHYDRATE,\r\n} from 'redux-persist';\r\nimport contactReducer from './contacts/contacts-reducer';\r\n\r\n/* const contactsPersistConfig = {\r\n  key: 'contactsDb',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}; */\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contact: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n/* const persistor = persistStore(store); */\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}